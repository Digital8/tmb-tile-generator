{"version":3,"sources":["App.tsx","chance.ts","Tile.ts","index.tsx"],"names":["App","pdf","svg","src","qs","stringify","format","customSize","width","height","unit","data","canvas","fetchedAt","Date","getTime","toString","chance","Chance","RESOLUTION","Tile","props","text","texts","fontSize","ctx","gap","fontFamily","background","Object","assign","this","blit","font","size","fillStyle","color","instances","instance","x","y","fillText","fillRect","forEach","colors","distribution","random","Math","document","createElement","getContext","measureText","getMetrics","fit","textAlign","textBaseline","generator","halton","haltonND","bind","kronecker","kroneckerND","plastic","plasticND","Array","from","take","map","length","metrics","scale","left","actualBoundingBoxLeft","right","actualBoundingBoxRight","ascent","actualBoundingBoxAscent","descent","actualBoundingBoxDescent","tick","boxes","op","xMin","yMin","box","push","boxIntersect","i","j","index","t","fn","rest","window","templateProps","tile","create","pickone","first","body","appendChild","toCanvas","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3a71f64b.chunk.js","sourcesContent":["import qs from \"qs\";\n\nexport function App({ pdf, svg }: any) {\n  return (\n    <>\n      <input />\n      <img\n        src={`https://cdn.make.cm/make/t/ba4c9684-a7af-4ca3-b929-291d6c196be3/k/639f5a8a-3056-48ff-bc67-c7613b9ecdca.b6d6a70ce98c5defcbc0282c9660dbc9/sync?${qs.stringify(\n          {\n            format: \"png\",\n            customSize: {\n              width: \"512\",\n              height: \"512\",\n              unit: \"px\",\n            },\n            data: {\n              canvas: true,\n            },\n            fetchedAt: new Date().getTime().toString(),\n          }\n        )}`}\n      />\n    </>\n  );\n  // useEffect(() => {\n  //   (async () => {\n\n  //   })();\n  // }, []);\n  // return (\n  //   <>\n  //     {pdf ? <img src=\"./pdf.svg\" alt=\"\" /> : null}\n  //     {svg ? (\n  //       <svg viewBox=\"0 0 512 512\" style={{ width: 512, height: 512 }}>\n  //         <text x=\"50%\" y=\"50%\" style={{ fontSize: \"72px\" }}>\n  //           Test\n  //         </text>\n  //         <rect\n  //           x=\"0\"\n  //           y=\"0\"\n  //           width=\"512\"\n  //           height=\"512\"\n  //           fill=\"none\"\n  //           stroke=\"hotpink\"\n  //         ></rect>\n  //       </svg>\n  //     ) : null}\n  //   </>\n  // );\n}\n","import { Chance } from \"chance\";\nexport const chance = new Chance();\n","import { haltonND, kroneckerND, plasticND } from \"@thi.ng/lowdisc\";\nimport { take } from \"@thi.ng/transducers\";\nimport boxIntersect from \"box-intersect\";\n\nconst RESOLUTION = 512;\n\nexport class Tile {\n  text!: string;\n  texts!: any[];\n  fontSize!: number;\n  ctx!: CanvasRenderingContext2D;\n  gap!: number;\n  fontFamily!: string;\n  background!: string;\n  canvas!: HTMLCanvasElement;\n  constructor(props: unknown) {\n    Object.assign(this, props);\n  }\n  static create({\n    text,\n    background,\n    colors,\n    distribution = \"plastic\",\n    gap = 0.1,\n    random = Math.random,\n    font: fontFamily,\n  }: {\n    text: string;\n    background: string;\n    font: string;\n    colors: string[];\n    distribution?: \"halton\" | \"kronecker\" | \"plastic\";\n    gap?: number;\n    random?: () => number;\n  }) {\n    // const fontFamily = \"blankie\";\n    // const font = new FontFace(fontFamily, fontBytes);\n    // await font.load();\n    // document.fonts.add(font);\n\n    const fontSize = fit({\n      fontFamily,\n      text,\n    });\n\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = RESOLUTION;\n    canvas.height = RESOLUTION;\n\n    const ctx = canvas.getContext(\"2d\")!;\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"alphabetic\";\n\n    const generator = {\n      halton: haltonND.bind(null, [2, 3]),\n      kronecker: kroneckerND.bind(null, [1 / 2 ** 0.5, 1 / 5 ** 0.5]),\n      plastic: plasticND.bind(null, 2),\n    }[distribution]((random() * 1024) | 0);\n    let texts = Array.from(take<any>(32, generator)).map(([x, y]) => {\n      return {\n        x: x * 2 - 1,\n        y: y * 2 - 1,\n        size: 0.75 + random() * 0.75,\n        color: colors[(colors.length * random()) | 0],\n      };\n    });\n\n    const measure = (font: string) => {\n      ctx.font = font;\n      return ctx.measureText(text);\n    };\n    const metrics = measure(`${fontSize}px ${fontFamily}`);\n    const getMetrics = (scale: number) => {\n      return {\n        left: metrics.actualBoundingBoxLeft * scale,\n        right: metrics.actualBoundingBoxRight * scale,\n        ascent: metrics.actualBoundingBoxAscent * scale,\n        descent: metrics.actualBoundingBoxDescent * scale,\n      };\n    };\n\n    const tick = () => {\n      const boxes = [] as any;\n      texts.forEach((text: any) => {\n        delete text.op;\n        const metrics = getMetrics(text.size);\n        instances(text, (instance: any) => {\n          const x = ((instance.x + 1) / 2) * RESOLUTION;\n          const y = ((-instance.y + 1) / 2) * RESOLUTION;\n          const xMin = x - metrics.left;\n          const yMin = y - metrics.ascent;\n          const box = [\n            xMin,\n            yMin,\n            xMin + metrics.left + metrics.right,\n            yMin + metrics.ascent + metrics.descent,\n          ] as any;\n          box.text = text;\n          boxes.push(box);\n        });\n      });\n      boxIntersect(boxes, (i, j) => {\n        [i, j].forEach((index) => (boxes[index].text.op = \"shrink\"));\n      });\n      const delta = 1e-3 * 5;\n      texts.forEach((t: any) => {\n        t.size *= t.op === \"shrink\" ? 1 - delta : 1 + delta;\n      });\n    };\n\n    for (let index = 0; index < 512; index++) {\n      tick();\n    }\n\n    return new Tile({\n      text,\n      texts,\n      fontSize,\n      canvas,\n      ctx,\n      fontFamily,\n      gap,\n      background,\n    });\n  }\n  toCanvas() {\n    const blit = (props: {\n      size: number;\n      x: number;\n      y: number;\n      color: string;\n    }) => {\n      this.ctx.font = `${this.fontSize * props.size * (1 - this.gap)}px ${\n        this.fontFamily\n      }`;\n      this.ctx.fillStyle = props.color;\n      instances(props, (instance: any) => {\n        const x = ((instance.x + 1) / 2) * RESOLUTION;\n        const y = ((-instance.y + 1) / 2) * RESOLUTION;\n        this.ctx.fillText(this.text, x, y);\n      });\n    };\n\n    const draw = () => {\n      this.ctx.fillStyle = this.background;\n      this.ctx.fillRect(0, 0, RESOLUTION, RESOLUTION);\n      this.texts.forEach(blit);\n    };\n    draw();\n\n    return this.canvas;\n  }\n}\n\nexport function instances({ x, y, ...rest }: any, fn: any) {\n  for (let i = -1; i <= 1; i++) {\n    for (let j = -1; j <= 1; j++) {\n      fn({ ...rest, x: i * 2 + x, y: j * 2 + y });\n    }\n  }\n}\n\nexport function fit({\n  fontFamily,\n  text,\n}: {\n  fontFamily: string;\n  text: string;\n}) {\n  const { width } = getMetrics({ fontFamily, text });\n  return (RESOLUTION / 8) * (RESOLUTION / 3 / width);\n}\n\nexport function getMetrics({\n  fontFamily,\n  text,\n}: {\n  fontFamily: string;\n  text: string;\n}) {\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = RESOLUTION;\n  canvas.height = RESOLUTION;\n  const ctx = canvas.getContext(\"2d\")!;\n  let fontSize = RESOLUTION / 8;\n  ctx.font = `${fontSize}px ${fontFamily}`;\n  return ctx.measureText(text);\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport { chance } from \"./chance\";\nimport \"./index.css\";\nimport { Tile } from \"./Tile\";\n\nconst { templateProps = {} } = window as unknown as {\n  templateProps: Record<string, any>;\n};\n\nif (templateProps.canvas) {\n  const tile = Tile.create({\n    background: chance.pickone([\"#111111\", \"#EEEEEE\"]),\n    colors: [\"#DA97B2\", \"#7EBCBE\", \"#676396\"],\n    font: \"Dancing Script\",\n    text: chance.first(),\n  });\n  document.body.appendChild(tile.toCanvas());\n} else {\n  ReactDOM.render(\n    <React.StrictMode>\n      <App {...templateProps} />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n  );\n}\n"],"sourceRoot":""}