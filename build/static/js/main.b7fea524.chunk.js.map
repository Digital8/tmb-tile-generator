{"version":3,"sources":["chance.ts","App.tsx","Tile.tsx","index.tsx"],"names":["chance","Chance","App","props","useState","colors","setColors","pickone","background","setBackground","font","setFont","text","first","setText","src","qs","stringify","format","customSize","width","height","unit","data","svg","fetchedAt","Date","getTime","toString","value","onChange","e","target","JSON","parse","RESOLUTION","random","Math","Tile","texts","fontSize","gap","fontFamily","metrics","Object","assign","this","distribution","rest","generator","halton","haltonND","bind","kronecker","kroneckerND","plastic","plasticND","Array","from","take","map","x","y","size","color","length","getMetrics","scale","left","actualBoundingBoxLeft","right","actualBoundingBoxRight","ascent","actualBoundingBoxAscent","descent","actualBoundingBoxDescent","tick","boxes","forEach","op","instances","instance","xMin","yMin","box","push","boxIntersect","i","j","index","t","canvas","document","createElement","ctx","getContext","textAlign","textBaseline","blit","fillStyle","fillText","fillRect","toCanvas","toDataURL","renderToStaticMarkup","style","flatMap","textAnchor","fill","fn","fit","measure","measureText","window","templateProps","location","search","parsed","slice","a","url","fontFace","FontFace","load","fonts","add","tile","div","debug","innerText","innerHTML","toSVG","body","appendChild","pdf","img","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b7fea524.chunk.js","sourcesContent":["import { Chance } from \"chance\";\nexport const chance = new Chance();\n","import qs from \"qs\";\nimport { useState } from \"react\";\nimport { chance } from \"./chance\";\n\nexport function App(props: any) {\n  const [colors, setColors] = useState([\"#DA97B2\", \"#7EBCBE\", \"#676396\"]);\n  const [background, setBackground] = useState(\n    chance.pickone([\"#111111\", \"#EEEEEE\"])\n  );\n  const [font, setFont] = useState(\n    \"https://thatsmyblankie.wpengine.com/wp-content/themes/picostrap-child/fonts/customiser/UnicornsareAwesome.woff2\"\n  );\n  const [text, setText] = useState(props.text ?? chance.first());\n\n  const src = `https://cdn.make.cm/make/t/ba4c9684-a7af-4ca3-b929-291d6c196be3/k/639f5a8a-3056-48ff-bc67-c7613b9ecdca.b6d6a70ce98c5defcbc0282c9660dbc9/sync?${qs.stringify(\n    {\n      format: \"svg\",\n      customSize: {\n        width: \"512\",\n        height: \"512\",\n        unit: \"px\",\n      },\n      data: {\n        svg: true,\n        colors,\n        background,\n        font,\n        text,\n      },\n      fetchedAt: new Date().getTime().toString(),\n    }\n  )}`;\n\n  return (\n    <>\n      <div>\n        <label>Font</label>\n        <input value={font} onChange={(e) => setFont(e.target.value)} />\n      </div>\n      <div>\n        <label>Text</label>\n        <input value={text} onChange={(e) => setText(e.target.value)} />\n      </div>\n      <div>\n        <label>Background</label>\n        <input\n          value={background}\n          onChange={(e) => setBackground(e.target.value)}\n        />\n      </div>\n      <div>\n        <label>Colors</label>\n        <input\n          value={JSON.stringify(colors)}\n          onChange={(e) => setColors(JSON.parse(e.target.value))}\n        />\n      </div>\n      <div>\n        <img src={src} />\n      </div>\n      {/* {tile ? (\n        <div style={{ display: \"flex\" }}>\n          <div\n            style={{ width: 512, height: 512 }}\n            dangerouslySetInnerHTML={{\n              __html: (() => tile.toSVG())(),\n            }}\n          ></div>\n          <img src={(() => tile.toDataURL())()} alt=\"\" />\n        </div>\n      ) : null} */}\n\n      {/* <div style={{ display: \"flex\" }}>\n        {!LIMIT ? (\n          <img\n            src={`https://cdn.make.cm/make/t/ba4c9684-a7af-4ca3-b929-291d6c196be3/k/639f5a8a-3056-48ff-bc67-c7613b9ecdca.b6d6a70ce98c5defcbc0282c9660dbc9/sync?${qs.stringify(\n              {\n                format: \"png\",\n                customSize: {\n                  width: \"512\",\n                  height: \"512\",\n                  unit: \"px\",\n                },\n                data: {\n                  canvas: true,\n                },\n                fetchedAt: new Date().getTime().toString(),\n              }\n            )}`}\n          />\n        ) : null}\n      </div> */}\n    </>\n  );\n  // useEffect(() => {\n  //   (async () => {\n\n  //   })();\n  // }, []);\n  // return (\n  //   <>\n  //     {pdf ? <img src=\"./pdf.svg\" alt=\"\" /> : null}\n  //     {svg ? (\n  //       <svg viewBox=\"0 0 512 512\" style={{ width: 512, height: 512 }}>\n  //         <text x=\"50%\" y=\"50%\" style={{ fontSize: \"72px\" }}>\n  //           Test\n  //         </text>\n  //         <rect\n  //           x=\"0\"\n  //           y=\"0\"\n  //           width=\"512\"\n  //           height=\"512\"\n  //           fill=\"none\"\n  //           stroke=\"hotpink\"\n  //         ></rect>\n  //       </svg>\n  //     ) : null}\n  //   </>\n  // );\n}\n\n// const [tile, setTile] = useState<Tile | null>(null);\n\n// useEffect(() => {\n//   const worker = new Worker();\n//   const api = Comlink.wrap<any>(worker);\n//   const font = \"Dancing Script\";\n//   const fontSize = fit({\n//     fontFamily: font,\n//     text,\n//   });\n\n//   const metrics = measure({ font: `${fontSize}px ${font}`, text });\n//   const props = {\n//     background: chance.pickone([\"#111111\", \"#EEEEEE\"]),\n//     colors: [\"#DA97B2\", \"#7EBCBE\", \"#676396\"],\n//     font,\n//     text,\n//     metrics: {\n//       actualBoundingBoxAscent: metrics.actualBoundingBoxAscent,\n//       actualBoundingBoxDescent: metrics.actualBoundingBoxDescent,\n//       actualBoundingBoxLeft: metrics.actualBoundingBoxLeft,\n//       actualBoundingBoxRight: metrics.actualBoundingBoxRight,\n//       fontBoundingBoxAscent: metrics.fontBoundingBoxAscent,\n//       fontBoundingBoxDescent: metrics.fontBoundingBoxDescent,\n//       width: metrics.width,\n//     },\n//     fontSize,\n//   };\n//   (async () => {\n//     const tile = new Tile(await api.tile(props));\n//     setTile(tile);\n//   })();\n// }, [text]);\n","import { haltonND, kroneckerND, plasticND } from \"@thi.ng/lowdisc\";\nimport { take } from \"@thi.ng/transducers\";\nimport boxIntersect from \"box-intersect\";\nimport { renderToStaticMarkup } from \"react-dom/server\";\n\nconst RESOLUTION = 512;\nconst random = Math.random;\nconst ITERATIONS = 256;\n\nexport class Tile {\n  text!: string;\n  texts!: any[];\n  fontSize!: number;\n  gap!: number;\n  fontFamily!: string;\n  background!: string;\n  metrics!: TextMetrics;\n  constructor(props: {\n    text: string;\n    background: string;\n    font: string;\n    colors: string[];\n    distribution?: \"halton\" | \"kronecker\" | \"plastic\";\n    gap?: number;\n    metrics: TextMetrics;\n    texts?: any[];\n    fontSize?: number;\n  }) {\n    if (props.texts) {\n      Object.assign(this, props);\n      return;\n    }\n\n    const {\n      colors,\n      distribution = \"plastic\",\n      gap = 0.1,\n      font: fontFamily,\n      metrics,\n      fontSize,\n      ...rest\n    } = props;\n\n    const generator = {\n      halton: haltonND.bind(null, [2, 3]),\n      kronecker: kroneckerND.bind(null, [1 / 2 ** 0.5, 1 / 5 ** 0.5]),\n      plastic: plasticND.bind(null, 2),\n    }[distribution](0 ?? (random() * 1024) | 0);\n    let texts = Array.from(take<any>(32, generator)).map(([x, y]) => {\n      return {\n        x: x * 2 - 1,\n        y: y * 2 - 1,\n        size: 0.75 + random() * 0.75,\n        color: colors[(colors.length * random()) | 0],\n      };\n    });\n\n    const getMetrics = (scale: number) => {\n      return {\n        left: metrics.actualBoundingBoxLeft * scale,\n        right: metrics.actualBoundingBoxRight * scale,\n        ascent: metrics.actualBoundingBoxAscent * scale,\n        descent: metrics.actualBoundingBoxDescent * scale,\n      };\n    };\n\n    const tick = () => {\n      const boxes = [] as any;\n      texts.forEach((text: any) => {\n        delete text.op;\n        const metrics = getMetrics(text.size);\n        instances(text, (instance: any) => {\n          const x = ((instance.x + 1) / 2) * RESOLUTION;\n          const y = ((-instance.y + 1) / 2) * RESOLUTION;\n          const xMin = x - metrics.left;\n          const yMin = y - metrics.ascent;\n          const box = [\n            xMin,\n            yMin,\n            xMin + metrics.left + metrics.right,\n            yMin + metrics.ascent + metrics.descent,\n          ] as any;\n          box.text = text;\n          boxes.push(box);\n        });\n      });\n      boxIntersect(boxes, (i, j) => {\n        [i, j].forEach((index) => (boxes[index].text.op = \"shrink\"));\n      });\n      const delta = 1e-3 * 5;\n      texts.forEach((t: any) => {\n        t.size *= t.op === \"shrink\" ? 1 - delta : 1 + delta;\n      });\n    };\n\n    for (let index = 0; index < ITERATIONS; index++) {\n      tick();\n    }\n\n    Object.assign(this, {\n      ...rest,\n      texts,\n      fontSize,\n      fontFamily,\n      gap,\n      metrics,\n    });\n  }\n  toCanvas() {\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = RESOLUTION;\n    canvas.height = RESOLUTION;\n\n    const ctx = canvas.getContext(\"2d\")!;\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"alphabetic\";\n\n    const blit = (props: {\n      size: number;\n      x: number;\n      y: number;\n      color: string;\n    }) => {\n      ctx.font = `${this.fontSize * props.size * (1 - this.gap)}px ${\n        this.fontFamily\n      }`;\n      ctx.fillStyle = props.color;\n      instances(props, (instance: any) => {\n        const x = ((instance.x + 1) / 2) * RESOLUTION;\n        const y = ((-instance.y + 1) / 2) * RESOLUTION;\n        ctx.fillText(this.text, x, y);\n      });\n    };\n\n    const draw = () => {\n      ctx.fillStyle = this.background;\n      ctx.fillRect(0, 0, RESOLUTION, RESOLUTION);\n      this.texts.forEach(blit);\n    };\n    draw();\n\n    return canvas;\n  }\n  toDataURL() {\n    return this.toCanvas().toDataURL();\n  }\n  toSVG() {\n    return renderToStaticMarkup(\n      <svg style={{ width: 512, height: 512, background: this.background }}>\n        {this.texts.flatMap((text) => {\n          const texts = [] as any;\n          const fontSize = `${this.fontSize * text.size * (1 - this.gap)}px`;\n          instances(text, (instance: any) => {\n            const x = ((instance.x + 1) / 2) * RESOLUTION;\n            const y = ((-instance.y + 1) / 2) * RESOLUTION;\n            texts.push(\n              <text\n                x={x}\n                y={y}\n                style={{\n                  fontSize,\n                  fontFamily: this.fontFamily,\n                }}\n                textAnchor=\"middle\"\n                fill={text.color}\n              >\n                {this.text}\n              </text>\n            );\n          });\n          return texts;\n        })}\n      </svg>\n    );\n  }\n}\n\nexport function instances({ x, y, ...rest }: any, fn: any) {\n  for (let i = -1; i <= 1; i++) {\n    for (let j = -1; j <= 1; j++) {\n      fn({ ...rest, x: i * 2 + x, y: j * 2 + y });\n    }\n  }\n}\n\nexport function fit({\n  fontFamily,\n  text,\n}: {\n  fontFamily: string;\n  text: string;\n}) {\n  const { width } = measure({\n    font: `${RESOLUTION / 8}px ${fontFamily}`,\n    text,\n  });\n  return (RESOLUTION / 8) * (RESOLUTION / 3 / width);\n}\n\nexport function measure({ font, text }: { font: string; text: string }) {\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = RESOLUTION;\n  canvas.height = RESOLUTION;\n  const ctx = canvas.getContext(\"2d\")!;\n  ctx.textAlign = \"center\";\n  ctx.textBaseline = \"alphabetic\";\n  ctx.font = font;\n  return ctx.measureText(text);\n}\n","import qs from \"qs\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport \"./index.css\";\nimport { fit, measure, Tile } from \"./Tile\";\n\nconst { templateProps = {} } = window as unknown as {\n  templateProps: Record<string, any>;\n};\n\nif (window.location.search.length > 1) {\n  const parsed = qs.parse(window.location.search.slice(1));\n  Object.assign(templateProps, parsed);\n}\n\nif (templateProps.svg) {\n  (async () => {\n    const { text, background, colors } = templateProps;\n    const url =\n      templateProps.font ??\n      \"https://thatsmyblankie.wpengine.com/wp-content/themes/picostrap-child/fonts/customiser/UnicornsareAwesome.woff2\";\n    const fontFamily = \"blankie\";\n    const fontFace = new FontFace(fontFamily, `url(\"${url}\")`);\n    await fontFace.load();\n    document.fonts.add(fontFace);\n    const fontSize = fit({\n      fontFamily,\n      text,\n    });\n    const metrics = measure({ font: `${fontSize}px ${fontFamily}`, text });\n    const tile = new Tile({\n      font: fontFamily,\n      text,\n      metrics,\n      fontSize,\n      background,\n      colors,\n    });\n    const div = document.createElement(\"div\");\n    if (templateProps.debug) {\n      div.innerText = JSON.stringify(templateProps);\n    } else {\n      div.innerHTML = tile.toSVG();\n    }\n    document.body.appendChild(div);\n  })();\n} else if (templateProps.pdf) {\n  const img = document.createElement(\"img\");\n  img.src = `https://cdn.make.cm/make/t/ba4c9684-a7af-4ca3-b929-291d6c196be3/k/639f5a8a-3056-48ff-bc67-c7613b9ecdca.b6d6a70ce98c5defcbc0282c9660dbc9/sync?${qs.stringify(\n    {\n      format: \"svg\",\n      customSize: {\n        width: \"512\",\n        height: \"512\",\n        unit: \"px\",\n      },\n      data: {\n        ...templateProps,\n        pdf: false,\n        svg: true,\n      },\n      fetchedAt: new Date().getTime().toString(),\n    }\n  )}`;\n  document.body.appendChild(img);\n} else {\n  ReactDOM.render(\n    <React.StrictMode>\n      <App {...templateProps} />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n  );\n}\n\n// console.log(\n//   qs.stringify(\n//     {\n//       background: chance.pickone([\"#111111\", \"#EEEEEE\"]),\n//       colors: [\"#DA97B2\", \"#7EBCBE\", \"#676396\"],\n//     },\n//     { encodeValuesOnly: true }\n//   )\n// );\n"],"sourceRoot":""}