{"version":3,"sources":["chance.ts","Tile.tsx","App.tsx","index.tsx"],"names":["chance","Chance","RESOLUTION","random","Math","makeDataURL","props","a","text","background","colors","font","rest","fontFamily","fontFace","FontFace","load","document","fonts","add","fontSize","fit","metrics","measure","tile","Tile","canvas","toCanvas","toDataURL","texts","gap","layout","Object","assign","this","distribution","lines","floor","actualBoundingBoxAscent","actualBoundingBoxDescent","j","shift","i","push","x","y","size","color","length","generator","halton","haltonND","bind","kronecker","kroneckerND","plastic","plasticND","Array","from","take","map","getMetrics","scale","left","actualBoundingBoxLeft","right","actualBoundingBoxRight","ascent","descent","tick","boxes","forEach","op","instances","instance","xMin","yMin","box","boxIntersect","index","t","createElement","width","height","ctx","getContext","textAlign","textBaseline","blit","fillStyle","fillText","fillRect","renderToStaticMarkup","style","xmlns","flatMap","textAnchor","fill","fn","measureText","App","useState","setColors","setLayout","pickone","setBackground","setFont","first","setText","src","setSrc","useEffect","value","onChange","e","target","JSON","stringify","parse","window","templateProps","location","search","parsed","qs","slice","svg","url","div","debug","innerText","innerHTML","toSVG","body","appendChild","pdf","img","format","customSize","unit","data","fetchedAt","Date","getTime","toString","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ead4f051.chunk.js","sourcesContent":["import { Chance } from \"chance\";\nexport const chance = new Chance();\n","import { haltonND, kroneckerND, plasticND } from \"@thi.ng/lowdisc\";\nimport { take } from \"@thi.ng/transducers\";\nimport boxIntersect from \"box-intersect\";\nimport { renderToStaticMarkup } from \"react-dom/server\";\n\nconst RESOLUTION = 512;\nconst random = Math.random;\nconst ITERATIONS = 256;\n\nexport async function makeDataURL(props: any) {\n  const { text, background, colors, font, ...rest } = props;\n  const url =\n    font ??\n    \"https://thatsmyblankie.wpengine.com/wp-content/themes/picostrap-child/fonts/customiser/UnicornsareAwesome.woff2\";\n  const fontFamily = \"blankie\";\n  const fontFace = new FontFace(fontFamily, `url(\"${url}\")`);\n  await fontFace.load();\n  document.fonts.add(fontFace);\n  const fontSize = fit({\n    fontFamily,\n    text,\n  });\n  const metrics = measure({ font: `${fontSize}px ${fontFamily}`, text });\n  const tile = new Tile({\n    font: fontFamily,\n    text,\n    metrics,\n    fontSize,\n    background,\n    colors,\n    ...rest,\n  });\n  const canvas = tile.toCanvas();\n  return canvas.toDataURL();\n}\n\nexport class Tile {\n  text!: string;\n  texts!: any[];\n  fontSize!: number;\n  gap!: number;\n  fontFamily!: string;\n  background!: string;\n  metrics!: TextMetrics;\n  layout?: string;\n  constructor(props: {\n    layout?: string;\n    text: string;\n    background?: string;\n    font: string;\n    colors?: string[];\n    distribution?: \"halton\" | \"kronecker\" | \"plastic\";\n    gap?: number;\n    metrics: TextMetrics;\n    texts?: any[];\n    fontSize?: number;\n  }) {\n    if (props.texts) {\n      Object.assign(this, props);\n      return;\n    }\n\n    const {\n      background = \"transparent\",\n      text,\n      layout,\n      colors = [\"#111111\"],\n      distribution = \"plastic\",\n      gap = 0.1,\n      font: fontFamily,\n      metrics,\n      fontSize,\n      ...rest\n    } = props;\n\n    const texts = (() => {\n      if (layout === \"stacked\") {\n        const metrics = measure({ font: `${fontSize}px ${fontFamily}`, text });\n        const lines = Math.floor(\n          RESOLUTION /\n            (metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent)\n        );\n        const texts: any[] = [];\n        for (let j = 0; j < lines; j++) {\n          let shift = Math.random() * 0.5;\n          for (let i = 0; i < 4; i++) {\n            texts.push({\n              x: -1 + 0.5 * i + shift,\n              y: -1 + (2 / lines) * j,\n              size: 1,\n              color: colors[(colors.length * random()) | 0],\n            });\n          }\n        }\n        return texts;\n      } else {\n        const generator = {\n          halton: haltonND.bind(null, [2, 3]),\n          kronecker: kroneckerND.bind(null, [1 / 2 ** 0.5, 1 / 5 ** 0.5]),\n          plastic: plasticND.bind(null, 2),\n        }[distribution](0 ?? (random() * 1024) | 0);\n        const texts = Array.from(take<any>(32, generator)).map(([x, y]) => {\n          return {\n            x: x * 2 - 1,\n            y: y * 2 - 1,\n            size: 0.75 + random() * 0.75,\n            color: colors[(colors.length * random()) | 0],\n          };\n        });\n        const getMetrics = (scale: number) => {\n          return {\n            left: metrics.actualBoundingBoxLeft * scale,\n            right: metrics.actualBoundingBoxRight * scale,\n            ascent: metrics.actualBoundingBoxAscent * scale,\n            descent: metrics.actualBoundingBoxDescent * scale,\n          };\n        };\n        const tick = () => {\n          const boxes = [] as any;\n          texts.forEach((text: any) => {\n            delete text.op;\n            const metrics = getMetrics(text.size);\n            instances(text, (instance: any) => {\n              const x = ((instance.x + 1) / 2) * RESOLUTION;\n              const y = ((-instance.y + 1) / 2) * RESOLUTION;\n              const xMin = x - metrics.left;\n              const yMin = y - metrics.ascent;\n              const box = [\n                xMin,\n                yMin,\n                xMin + metrics.left + metrics.right,\n                yMin + metrics.ascent + metrics.descent,\n              ] as any;\n              box.text = text;\n              boxes.push(box);\n            });\n          });\n          boxIntersect(boxes, (i, j) => {\n            [i, j].forEach((index) => (boxes[index].text.op = \"shrink\"));\n          });\n          const delta = 1e-3 * 5;\n          texts.forEach((t: any) => {\n            t.size *= t.op === \"shrink\" ? 1 - delta : 1 + delta;\n          });\n        };\n        for (let index = 0; index < ITERATIONS; index++) {\n          tick();\n        }\n        return texts;\n      }\n    })();\n\n    Object.assign(this, {\n      text,\n      texts,\n      fontSize,\n      fontFamily,\n      gap,\n      metrics,\n      background,\n      ...rest,\n    });\n  }\n  toCanvas() {\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = RESOLUTION;\n    canvas.height = RESOLUTION;\n\n    const ctx = canvas.getContext(\"2d\")!;\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"alphabetic\";\n\n    const blit = (props: {\n      size: number;\n      x: number;\n      y: number;\n      color: string;\n    }) => {\n      ctx.font = `${this.fontSize * props.size * (1 - this.gap)}px ${\n        this.fontFamily\n      }`;\n      ctx.fillStyle = props.color;\n      instances(props, (instance: any) => {\n        const x = ((instance.x + 1) / 2) * RESOLUTION;\n        const y = ((-instance.y + 1) / 2) * RESOLUTION;\n        ctx.fillText(this.text, x, y);\n      });\n    };\n\n    const draw = () => {\n      ctx.fillStyle = this.background;\n      ctx.fillRect(0, 0, RESOLUTION, RESOLUTION);\n      this.texts.forEach(blit);\n    };\n    draw();\n\n    return canvas;\n  }\n  toDataURL() {\n    return this.toCanvas().toDataURL();\n  }\n  toSVG() {\n    return renderToStaticMarkup(\n      <svg\n        style={{ width: 512, height: 512, background: this.background }}\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        {this.texts.flatMap((text) => {\n          const texts = [] as any;\n          const fontSize = `${this.fontSize * text.size * (1 - this.gap)}px`;\n          instances(text, (instance: any) => {\n            const x = ((instance.x + 1) / 2) * RESOLUTION;\n            const y = ((-instance.y + 1) / 2) * RESOLUTION;\n            texts.push(\n              <text\n                x={x}\n                y={y}\n                style={{\n                  fontSize,\n                  fontFamily: this.fontFamily,\n                }}\n                textAnchor=\"middle\"\n                fill={text.color}\n              >\n                {this.text}\n              </text>\n            );\n          });\n          return texts;\n        })}\n      </svg>\n    );\n  }\n}\n\nexport function instances({ x, y, ...rest }: any, fn: any) {\n  for (let i = -1; i <= 1; i++) {\n    for (let j = -1; j <= 1; j++) {\n      fn({ ...rest, x: i * 2 + x, y: j * 2 + y });\n    }\n  }\n}\n\nexport function fit({\n  fontFamily,\n  text,\n}: {\n  fontFamily: string;\n  text: string;\n}) {\n  const { width } = measure({\n    font: `${RESOLUTION / 8}px ${fontFamily}`,\n    text,\n  });\n  return (RESOLUTION / 8) * (RESOLUTION / 4 / width);\n}\n\nexport function measure({ font, text }: { font: string; text: string }) {\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = RESOLUTION;\n  canvas.height = RESOLUTION;\n  const ctx = canvas.getContext(\"2d\")!;\n  ctx.textAlign = \"center\";\n  ctx.textBaseline = \"alphabetic\";\n  ctx.font = font;\n  return ctx.measureText(text);\n}\n\nexport async function makeSVG(props: any) {\n  const { text, background, colors, font } = props;\n  const url =\n    font ??\n    \"https://thatsmyblankie.wpengine.com/wp-content/themes/picostrap-child/fonts/customiser/UnicornsareAwesome.woff2\";\n  const fontFamily = \"blankie\";\n  const fontFace = new FontFace(fontFamily, `url(\"${url}\")`);\n  await fontFace.load();\n  document.fonts.add(fontFace);\n  const fontSize = fit({\n    fontFamily,\n    text,\n  });\n  const metrics = measure({ font: `${fontSize}px ${fontFamily}`, text });\n  const tile = new Tile({\n    font: fontFamily,\n    text,\n    metrics,\n    fontSize,\n    background,\n    colors,\n  });\n  return tile.toSVG();\n}\n","import qs from \"qs\";\nimport { useEffect, useState } from \"react\";\nimport { chance } from \"./chance\";\nimport { makeDataURL } from \"./Tile\";\n\nexport function App(props: any) {\n  const [colors, setColors] = useState([\"#DA97B2\", \"#7EBCBE\", \"#676396\"]);\n\n  const [layout, setLayout] = useState(\"stacked\");\n\n  const [background, setBackground] = useState(\n    chance.pickone([\"#111111\", \"#EEEEEE\"])\n  );\n  const [font, setFont] = useState(\n    \"https://thatsmyblankie.wpengine.com/wp-content/themes/picostrap-child/fonts/customiser/UnicornsareAwesome.woff2\"\n  );\n  const [text, setText] = useState(props.text ?? chance.first());\n\n  const [src, setSrc] = useState<any>(null);\n\n  useEffect(() => {\n    (async () => {\n      setSrc(\n        await makeDataURL({\n          background,\n          colors,\n          text,\n          font,\n          layout,\n        })\n      );\n    })();\n  }, []);\n\n  // const src = `https://cdn.make.cm/make/s/MeJxBCL1tTQQ?${qs.stringify({\n  //   data: {\n  //     background,\n  //     colors,\n  //     font,\n  //     text,\n  //   },\n  // })}`;\n\n  return (\n    <>\n      <div>\n        <label>Layout</label>\n        <input value={layout} onChange={(e) => setLayout(e.target.value)} />\n      </div>\n      <div>\n        <label>Font</label>\n        <input value={font} onChange={(e) => setFont(e.target.value)} />\n      </div>\n      <div>\n        <label>Text</label>\n        <input value={text} onChange={(e) => setText(e.target.value)} />\n      </div>\n      <div>\n        <label>Background</label>\n        <input\n          value={background}\n          onChange={(e) => setBackground(e.target.value)}\n        />\n      </div>\n      <div>\n        <label>Colors</label>\n        <input\n          value={JSON.stringify(colors)}\n          onChange={(e) => setColors(JSON.parse(e.target.value))}\n        />\n      </div>\n      <div>{src ? <img src={src} /> : null}</div>\n      {/* <div>\n        <a\n          href={`https://cdn.make.cm/make/s/LAs9Ky5L4Y98?${qs.stringify({\n            data: {\n              background,\n              colors,\n              font,\n              text,\n            },\n          })}`}\n        >\n          PDF\n        </a>\n      </div> */}\n    </>\n  );\n}\n\n// useEffect(() => {\n//   (async () => {\n\n//   })();\n// }, []);\n// return (\n//   <>\n//     {pdf ? <img src=\"./pdf.svg\" alt=\"\" /> : null}\n//     {svg ? (\n//       <svg viewBox=\"0 0 512 512\" style={{ width: 512, height: 512 }}>\n//         <text x=\"50%\" y=\"50%\" style={{ fontSize: \"72px\" }}>\n//           Test\n//         </text>\n//         <rect\n//           x=\"0\"\n//           y=\"0\"\n//           width=\"512\"\n//           height=\"512\"\n//           fill=\"none\"\n//           stroke=\"hotpink\"\n//         ></rect>\n//       </svg>\n//     ) : null}\n//   </>\n// );\n\n// {/* {tile ? (\n//         <div style={{ display: \"flex\" }}>\n//           <div\n//             style={{ width: 512, height: 512 }}\n//             dangerouslySetInnerHTML={{\n//               __html: (() => tile.toSVG())(),\n//             }}\n//           ></div>\n//           <img src={(() => tile.toDataURL())()} alt=\"\" />\n//         </div>\n//       ) : null} */}\n\n//       {/* <div style={{ display: \"flex\" }}>\n//         {!LIMIT ? (\n//           <img\n//             src={`https://cdn.make.cm/make/t/ba4c9684-a7af-4ca3-b929-291d6c196be3/k/639f5a8a-3056-48ff-bc67-c7613b9ecdca.b6d6a70ce98c5defcbc0282c9660dbc9/sync?${qs.stringify(\n//               {\n//                 format: \"png\",\n//                 customSize: {\n//                   width: \"512\",\n//                   height: \"512\",\n//                   unit: \"px\",\n//                 },\n//                 data: {\n//                   canvas: true,\n//                 },\n//                 fetchedAt: new Date().getTime().toString(),\n//               }\n//             )}`}\n//           />\n//         ) : null}\n//       </div> */}\n\n// const [tile, setTile] = useState<Tile | null>(null);\n\n// useEffect(() => {\n//   const worker = new Worker();\n//   const api = Comlink.wrap<any>(worker);\n//   const font = \"Dancing Script\";\n//   const fontSize = fit({\n//     fontFamily: font,\n//     text,\n//   });\n\n//   const metrics = measure({ font: `${fontSize}px ${font}`, text });\n//   const props = {\n//     background: chance.pickone([\"#111111\", \"#EEEEEE\"]),\n//     colors: [\"#DA97B2\", \"#7EBCBE\", \"#676396\"],\n//     font,\n//     text,\n//     metrics: {\n//       actualBoundingBoxAscent: metrics.actualBoundingBoxAscent,\n//       actualBoundingBoxDescent: metrics.actualBoundingBoxDescent,\n//       actualBoundingBoxLeft: metrics.actualBoundingBoxLeft,\n//       actualBoundingBoxRight: metrics.actualBoundingBoxRight,\n//       fontBoundingBoxAscent: metrics.fontBoundingBoxAscent,\n//       fontBoundingBoxDescent: metrics.fontBoundingBoxDescent,\n//       width: metrics.width,\n//     },\n//     fontSize,\n//   };\n//   (async () => {\n//     const tile = new Tile(await api.tile(props));\n//     setTile(tile);\n//   })();\n// }, [text]);\n","import qs from \"qs\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport \"./index.css\";\nimport { fit, measure, Tile } from \"./Tile\";\n\nconst { templateProps = {} } = window as unknown as {\n  templateProps: Record<string, any>;\n};\n\nif (window.location.search.length > 1) {\n  const parsed = qs.parse(window.location.search.slice(1));\n  Object.assign(templateProps, parsed);\n}\n\nif (templateProps.svg) {\n  (async () => {\n    const { text, ...rest } = templateProps;\n    const url =\n      templateProps.font ??\n      \"https://thatsmyblankie.wpengine.com/wp-content/themes/picostrap-child/fonts/customiser/UnicornsareAwesome.woff2\";\n    const fontFamily = \"blankie\";\n    const fontFace = new FontFace(fontFamily, `url(\"${url}\")`);\n    await fontFace.load();\n    document.fonts.add(fontFace);\n    const fontSize = fit({\n      fontFamily,\n      text,\n    });\n    const metrics = measure({ font: `${fontSize}px ${fontFamily}`, text });\n    const tile = new Tile({\n      font: fontFamily,\n      text,\n      metrics,\n      fontSize,\n      ...rest,\n    });\n    const div = document.createElement(\"div\");\n    if (templateProps.debug) {\n      div.innerText = JSON.stringify(templateProps);\n    } else {\n      div.innerHTML = tile.toSVG();\n    }\n    document.body.appendChild(div);\n  })();\n} else if (templateProps.pdf) {\n  const img = document.createElement(\"img\");\n  img.src = `https://cdn.make.cm/make/t/ba4c9684-a7af-4ca3-b929-291d6c196be3/k/639f5a8a-3056-48ff-bc67-c7613b9ecdca.b6d6a70ce98c5defcbc0282c9660dbc9/sync?${qs.stringify(\n    {\n      format: \"svg\",\n      customSize: {\n        width: \"512\",\n        height: \"512\",\n        unit: \"px\",\n      },\n      data: {\n        ...templateProps,\n        pdf: false,\n        svg: true,\n      },\n      fetchedAt: new Date().getTime().toString(),\n    }\n  )}`;\n  document.body.appendChild(img);\n} else {\n  ReactDOM.render(\n    <React.StrictMode>\n      <App {...templateProps} />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n  );\n}\n"],"sourceRoot":""}