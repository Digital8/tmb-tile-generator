{"version":3,"sources":["worker.ts","chance.ts","Tile.tsx","App.tsx","index.tsx"],"names":["Worker_fn","Worker","chance","Chance","RESOLUTION","random","Math","Tile","props","text","texts","fontSize","gap","fontFamily","background","metrics","Object","assign","this","colors","distribution","font","rest","generator","halton","haltonND","bind","kronecker","kroneckerND","plastic","plasticND","Array","from","take","map","x","y","size","color","length","getMetrics","scale","left","actualBoundingBoxLeft","right","actualBoundingBoxRight","ascent","actualBoundingBoxAscent","descent","actualBoundingBoxDescent","tick","boxes","forEach","op","instances","instance","xMin","yMin","box","push","boxIntersect","i","j","index","t","canvas","document","createElement","width","height","ctx","getContext","textAlign","textBaseline","blit","fillStyle","fillText","fillRect","toCanvas","toDataURL","renderToStaticMarkup","style","flatMap","textAnchor","fill","fn","measure","measureText","App","useState","first","setText","tile","setTile","useEffect","worker","api","Comlink","fit","pickone","fontBoundingBoxAscent","fontBoundingBoxDescent","a","value","onChange","e","target","display","dangerouslySetInnerHTML","__html","toSVG","src","alt","window","templateProps","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.bf61a42b.chunk.js","sourcesContent":["export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/worker.5717437d.worker.js\");\n}\n","import { Chance } from \"chance\";\nexport const chance = new Chance();\n","import { haltonND, kroneckerND, plasticND } from \"@thi.ng/lowdisc\";\nimport { take } from \"@thi.ng/transducers\";\nimport boxIntersect from \"box-intersect\";\nimport { renderToStaticMarkup } from \"react-dom/server\";\n\nconst RESOLUTION = 512;\nconst random = Math.random;\nconst ITERATIONS = 256;\n\nexport class Tile {\n  text!: string;\n  texts!: any[];\n  fontSize!: number;\n  gap!: number;\n  fontFamily!: string;\n  background!: string;\n  metrics!: TextMetrics;\n  constructor(props: {\n    text: string;\n    background: string;\n    font: string;\n    colors: string[];\n    distribution?: \"halton\" | \"kronecker\" | \"plastic\";\n    gap?: number;\n    metrics: TextMetrics;\n    texts?: any[];\n    fontSize?: number;\n  }) {\n    if (props.texts) {\n      Object.assign(this, props);\n      return;\n    }\n\n    const {\n      colors,\n      distribution = \"plastic\",\n      gap = 0.1,\n      font: fontFamily,\n      metrics,\n      fontSize,\n      ...rest\n    } = props;\n\n    const generator = {\n      halton: haltonND.bind(null, [2, 3]),\n      kronecker: kroneckerND.bind(null, [1 / 2 ** 0.5, 1 / 5 ** 0.5]),\n      plastic: plasticND.bind(null, 2),\n    }[distribution](0 ?? (random() * 1024) | 0);\n    let texts = Array.from(take<any>(32, generator)).map(([x, y]) => {\n      return {\n        x: x * 2 - 1,\n        y: y * 2 - 1,\n        size: 0.75 + random() * 0.75,\n        color: colors[(colors.length * random()) | 0],\n      };\n    });\n\n    const getMetrics = (scale: number) => {\n      return {\n        left: metrics.actualBoundingBoxLeft * scale,\n        right: metrics.actualBoundingBoxRight * scale,\n        ascent: metrics.actualBoundingBoxAscent * scale,\n        descent: metrics.actualBoundingBoxDescent * scale,\n      };\n    };\n\n    const tick = () => {\n      const boxes = [] as any;\n      texts.forEach((text: any) => {\n        delete text.op;\n        const metrics = getMetrics(text.size);\n        instances(text, (instance: any) => {\n          const x = ((instance.x + 1) / 2) * RESOLUTION;\n          const y = ((-instance.y + 1) / 2) * RESOLUTION;\n          const xMin = x - metrics.left;\n          const yMin = y - metrics.ascent;\n          const box = [\n            xMin,\n            yMin,\n            xMin + metrics.left + metrics.right,\n            yMin + metrics.ascent + metrics.descent,\n          ] as any;\n          box.text = text;\n          boxes.push(box);\n        });\n      });\n      boxIntersect(boxes, (i, j) => {\n        [i, j].forEach((index) => (boxes[index].text.op = \"shrink\"));\n      });\n      const delta = 1e-3 * 5;\n      texts.forEach((t: any) => {\n        t.size *= t.op === \"shrink\" ? 1 - delta : 1 + delta;\n      });\n    };\n\n    for (let index = 0; index < ITERATIONS; index++) {\n      tick();\n    }\n\n    Object.assign(this, {\n      ...rest,\n      texts,\n      fontSize,\n      fontFamily,\n      gap,\n      metrics,\n    });\n  }\n  toCanvas() {\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = RESOLUTION;\n    canvas.height = RESOLUTION;\n\n    const ctx = canvas.getContext(\"2d\")!;\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"alphabetic\";\n\n    const blit = (props: {\n      size: number;\n      x: number;\n      y: number;\n      color: string;\n    }) => {\n      ctx.font = `${this.fontSize * props.size * (1 - this.gap)}px ${\n        this.fontFamily\n      }`;\n      ctx.fillStyle = props.color;\n      instances(props, (instance: any) => {\n        const x = ((instance.x + 1) / 2) * RESOLUTION;\n        const y = ((-instance.y + 1) / 2) * RESOLUTION;\n        ctx.fillText(this.text, x, y);\n      });\n    };\n\n    const draw = () => {\n      ctx.fillStyle = this.background;\n      ctx.fillRect(0, 0, RESOLUTION, RESOLUTION);\n      this.texts.forEach(blit);\n    };\n    draw();\n\n    return canvas;\n  }\n  toDataURL() {\n    return this.toCanvas().toDataURL();\n  }\n  toSVG() {\n    return renderToStaticMarkup(\n      <svg style={{ width: 512, height: 512, background: this.background }}>\n        {this.texts.flatMap((text) => {\n          const texts = [] as any;\n          const fontSize = `${this.fontSize * text.size * (1 - this.gap)}px`;\n          instances(text, (instance: any) => {\n            const x = ((instance.x + 1) / 2) * RESOLUTION;\n            const y = ((-instance.y + 1) / 2) * RESOLUTION;\n            texts.push(\n              <text\n                x={x}\n                y={y}\n                style={{\n                  fontSize,\n                }}\n                textAnchor=\"middle\"\n                fill={text.color}\n              >\n                {this.text}\n              </text>\n            );\n          });\n          return texts;\n        })}\n      </svg>\n    );\n  }\n}\n\nexport function instances({ x, y, ...rest }: any, fn: any) {\n  for (let i = -1; i <= 1; i++) {\n    for (let j = -1; j <= 1; j++) {\n      fn({ ...rest, x: i * 2 + x, y: j * 2 + y });\n    }\n  }\n}\n\nexport function fit({\n  fontFamily,\n  text,\n}: {\n  fontFamily: string;\n  text: string;\n}) {\n  const { width } = measure({\n    font: `${RESOLUTION / 8}px ${fontFamily}`,\n    text,\n  });\n  return (RESOLUTION / 8) * (RESOLUTION / 3 / width);\n}\n\nexport function measure({ font, text }: { font: string; text: string }) {\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = RESOLUTION;\n  canvas.height = RESOLUTION;\n  const ctx = canvas.getContext(\"2d\")!;\n  ctx.textAlign = \"center\";\n  ctx.textBaseline = \"alphabetic\";\n  ctx.font = font;\n  return ctx.measureText(text);\n}\n","import * as Comlink from \"comlink\";\nimport { useEffect, useState } from \"react\";\n/* eslint-disable import/no-webpack-loader-syntax */\nimport Worker from \"worker-loader!./worker\";\nimport { chance } from \"./chance\";\nimport { fit, measure, Tile } from \"./Tile\";\n\nexport function App(props: any) {\n  const [text, setText] = useState(chance.first());\n  const [tile, setTile] = useState<Tile | null>(null);\n\n  useEffect(() => {\n    const worker = new Worker();\n    const api = Comlink.wrap<any>(worker);\n    const font = \"Dancing Script\";\n    const fontSize = fit({\n      fontFamily: font,\n      text,\n    });\n\n    const metrics = measure({ font: `${fontSize}px ${font}`, text });\n    const props = {\n      background: chance.pickone([\"#111111\", \"#EEEEEE\"]),\n      colors: [\"#DA97B2\", \"#7EBCBE\", \"#676396\"],\n      font,\n      text,\n      metrics: {\n        actualBoundingBoxAscent: metrics.actualBoundingBoxAscent,\n        actualBoundingBoxDescent: metrics.actualBoundingBoxDescent,\n        actualBoundingBoxLeft: metrics.actualBoundingBoxLeft,\n        actualBoundingBoxRight: metrics.actualBoundingBoxRight,\n        fontBoundingBoxAscent: metrics.fontBoundingBoxAscent,\n        fontBoundingBoxDescent: metrics.fontBoundingBoxDescent,\n        width: metrics.width,\n      },\n      fontSize,\n    };\n    (async () => {\n      const tile = new Tile(await api.tile(props));\n      setTile(tile);\n    })();\n  }, [text]);\n\n  return (\n    <>\n      <input value={text} onChange={(e) => setText(e.target.value)} />\n      {tile ? (\n        <div style={{ display: \"flex\" }}>\n          <div\n            style={{ width: 512, height: 512 }}\n            dangerouslySetInnerHTML={{\n              __html: (() => tile.toSVG())(),\n            }}\n          ></div>\n          <img src={(() => tile.toDataURL())()} alt=\"\" />\n        </div>\n      ) : null}\n\n      {/* <div style={{ display: \"flex\" }}>\n        {!LIMIT ? (\n          <img\n            src={`https://cdn.make.cm/make/t/ba4c9684-a7af-4ca3-b929-291d6c196be3/k/639f5a8a-3056-48ff-bc67-c7613b9ecdca.b6d6a70ce98c5defcbc0282c9660dbc9/sync?${qs.stringify(\n              {\n                format: \"png\",\n                customSize: {\n                  width: \"512\",\n                  height: \"512\",\n                  unit: \"px\",\n                },\n                data: {\n                  canvas: true,\n                },\n                fetchedAt: new Date().getTime().toString(),\n              }\n            )}`}\n          />\n        ) : null}\n      </div> */}\n    </>\n  );\n  // useEffect(() => {\n  //   (async () => {\n\n  //   })();\n  // }, []);\n  // return (\n  //   <>\n  //     {pdf ? <img src=\"./pdf.svg\" alt=\"\" /> : null}\n  //     {svg ? (\n  //       <svg viewBox=\"0 0 512 512\" style={{ width: 512, height: 512 }}>\n  //         <text x=\"50%\" y=\"50%\" style={{ fontSize: \"72px\" }}>\n  //           Test\n  //         </text>\n  //         <rect\n  //           x=\"0\"\n  //           y=\"0\"\n  //           width=\"512\"\n  //           height=\"512\"\n  //           fill=\"none\"\n  //           stroke=\"hotpink\"\n  //         ></rect>\n  //       </svg>\n  //     ) : null}\n  //   </>\n  // );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport { chance } from \"./chance\";\nimport \"./index.css\";\nimport { Tile } from \"./Tile\";\n\nconst { templateProps = {} } = window as unknown as {\n  templateProps: Record<string, any>;\n};\n\nif (templateProps.canvas) {\n  // const tile = Tile.create({\n  //   background: chance.pickone([\"#111111\", \"#EEEEEE\"]),\n  //   colors: [\"#DA97B2\", \"#7EBCBE\", \"#676396\"],\n  //   font: \"Dancing Script\",\n  //   text: chance.first(),\n  // });\n  // document.body.appendChild(tile.toCanvas());\n} else {\n  ReactDOM.render(\n    <React.StrictMode>\n      <App {...templateProps} />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n  );\n}\n"],"sourceRoot":""}